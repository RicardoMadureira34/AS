/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.Soundbank;

/**
 *
 * @author omp
 */
public class Server_GUI extends javax.swing.JFrame {

    int portserver = 0;
    Socket socketserver;
    //HashMap<Integer, HashMap> controlar_req = new HashMap<>();
    HashMap<Integer, DataHolder.Data> controlar_req = new HashMap<>();
    HashMap<String, Integer> req_deadline = new HashMap<>();
    HashMap<Integer, Integer> controlar_dealine = new HashMap<>();
    int count = 0;
    String str_idServidor = new String();
    ArrayList<String> queue = new ArrayList<>();
    DataInputStream datareceber_fromload = null;
    String str = new String();
    int id_servidor = 0;

    /**
     * Creates new form Server_GUI
     */
    public Server_GUI() {
        initComponents();

    }

    public void Start_Server() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        Port_server_swing = new javax.swing.JTextField();
        Start_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        request_recebdos_swing = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SERVER");

        jLabel2.setText("Port:");

        Port_server_swing.setText("11113");

        Start_Button.setText("Start");
        Start_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Start_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Request(s) Recebidos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(request_recebdos_swing)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(2, 2, 2)
                                .addComponent(Port_server_swing, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                        .addComponent(Start_Button)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Port_server_swing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Start_Button))
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(request_recebdos_swing, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Start_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Start_ButtonActionPerformed

        try {
            // TODO add your handling code here:

            portserver = Integer.parseInt(Port_server_swing.getText());
            OutputStream enviar_forload = null;
            InputStream receber_fromload = null;
            int counter = 0;

            try {
                socketserver = new Socket("127.0.0.1", portserver);
                counter++;

            } catch (IOException ex) {
            }
            enviar_forload = socketserver.getOutputStream();
            DataOutputStream dataenviar_forload = new DataOutputStream(enviar_forload);
            String msg_forload = "servidor";
            dataenviar_forload.writeUTF(msg_forload);
            dataenviar_forload.flush();
            //----------
            receber_fromload = socketserver.getInputStream();
            datareceber_fromload = new DataInputStream(receber_fromload);
            str_idServidor = datareceber_fromload.readUTF();

            id_servidor = Integer.parseInt(str_idServidor);
            System.out.println("id servidor: " + id_servidor);

        } catch (IOException ex) {
            Logger.getLogger(Server_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        while (true) {
            try {
                str = datareceber_fromload.readUTF();

            } catch (IOException ex) {
                Logger.getLogger(Server_GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            //alguma_coisa();
            if (controlar_req.size() < 6 && queue.size() == 0) {
                String[] process = str.split("[|]", 0);
                String str_processed = new String();
                int deadline = Integer.parseInt(process[6]);
                count++;
                System.out.println("Count -> " + count);
                controlar_req.put(count, new DataHolder.Data(str, deadline));
                System.out.println("inseriu na hash");
                //print(controlar_req);
                if (controlar_req.size() > 1) {
                    ThreadServer ts = new ThreadServer(controlar_req, socketserver, id_servidor, min_deadile(controlar_req));
                    ts.start();
                } else {
                    System.out.println("Menor do que 2");
                }

            } else if (queue.size() < 2) {
                queue.add(str);
                System.out.println("inseriu na queue");

            } else {
                System.out.println("REJEITADO");
            }

        }


    }//GEN-LAST:event_Start_ButtonActionPerformed

    public int min_deadile(HashMap<Integer, DataHolder.Data> controlar_dealine) {

        List<Map.Entry<Integer, DataHolder.Data>> list = new ArrayList<>(controlar_dealine.entrySet());
        //System.out.println("List -> " + list);
        Collections.sort(list, Comparator.comparing(o -> o.getValue().value));

        System.out.println("Menor -> " + list.stream().findFirst().get().getKey());
        return list.stream().findFirst().get().getKey();
    }

    public void print(HashMap<Integer, DataHolder.Data> example) {
        example.entrySet().forEach(entry -> {
            System.out.println(entry.getKey() + " " + entry.getValue());
        });
    }
//
//    public void alguma_coisa() {
//
//        if (controlar_req.size() < 3 && queue.size() > 0) {
//            count++;
//            controlar_req.put(count, queue.get(0));
//            queue.remove(0);
//            System.out.println("Removido da queue e por na hash");
//            ThreadServer ts = new ThreadServer(str, socketserver, id_servidor, count, controlar_req);
//            ts.start();
//
//        }
//    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Server_GUI exe = new Server_GUI();
        exe.setVisible(true);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Port_server_swing;
    private javax.swing.JButton Start_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField request_recebdos_swing;
    // End of variables declaration//GEN-END:variables
}
